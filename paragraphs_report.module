<?php

/**
 * Module file.
 *
 * @file
 * Contains paragraphs_report.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\paragraphs_report\Controller\ParagraphsReport;
use Drupal\Component\Serialization\Json;


/**
 * Implements hook_help().
 */
function paragraphs_report_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the paragraphs_report module.
    case 'help.page.paragraphs_report':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Get an inventory of paragraphs in use.') . '</p>';
      return $output;
    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Add report data from new node.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @throws
 */
function paragraphs_report_node_insert(EntityInterface $entity) {
  $moduleConfig = \Drupal::config('paragraphs_report.settings');
  $paraReport = new ParagraphsReport();
  $contentTypes = $paraReport->getTypes();
  // If watch content setting is enabled, update report data on entity save actions.
  if($moduleConfig->get('watch_content') && in_array($entity->bundle(), $contentTypes)) {
    // Send node to get parsed for paragraph fields/sub-fields.
    $json = Json::decode($moduleConfig->get('report'));
    $updated = $paraReport->getParasFromNid($entity->id(), $json);
    $paraReport->configSaveReport($updated);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Update report data with paragraph changes in node.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @throws
 */
function paragraphs_report_node_update(EntityInterface $entity) {
  $moduleConfig = \Drupal::config('paragraphs_report.settings');
  $paraReport = new ParagraphsReport();
  $contentTypes = $paraReport->getTypes();
  // If watch content setting is enabled, update report data on entity save actions.
  if($moduleConfig->get('watch_content') && in_array($entity->bundle(), $contentTypes)) {
    // Send node to get parsed for paragraph fields/sub-fields.
    $json = $paraReport->configRemoveNode($entity->id());
    $updated = $paraReport->getParasFromNid($entity->id(), $json);
    $paraReport->configSaveReport($updated);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Remove deleted node path from report data.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @throws
 */
function paragraphs_report_node_delete(EntityInterface $entity) {
  $moduleConfig = \Drupal::config('paragraphs_report.settings');
  $paraReport = new ParagraphsReport();
  $contentTypes = $paraReport->getTypes();
  // If watch content setting is enabled, update report data on entity save actions.
  if($moduleConfig->get('watch_content') && in_array($entity->bundle(), $contentTypes)) {
    $json = $paraReport->configRemoveNode($entity->id());
    $paraReport->configSaveReport($json);
  }
}
